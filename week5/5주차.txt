함수
main 함수가 없으면 오류 발생 -> c언어 계열 언어의 공통적 특징

[반환 타입] [함수명] ([매개변수 1], [매개변수 2], ...) {
	//함수 내 문장
	return [반환 값];
}

반환타입
 void 함수 : 반환 값이 따로 없고, 이벤트나 비즈니스 로직 수행 시에만 사용
 리턴 함수 : 이벤트나 비즈니스 로직 수행 후 결괏값을 반환 
	   	 반환값으로는 모든 타입을 사용 가능(개발자가 직접 만든 모델 클래스 포함)

매개변수 (parameter)
정의하는 방식에 따라 포지셔닝 파라미터, 네이밍 파라미터로 구분
 포지셔닝 파라미터 : 위치 중심, 타 언어와 동일 
				ex) 함수명 (파라미터 1, 파라미터2, ...) { }
 네이밍 파라미터 : 이름 중심, 파라미터 정의 부분을 중괄호( { } )로 감싸주면 네이밍 파라미터로 정의
			  선택적으로 사용 가능한 파라미터(옵셔널 파라미터)를 정의 할 때 유용.
			  순서 상관없이 이름으로 매칭.
				ex) 선언부: 함수명(파라미터 1, 파라미터2) { }
				     호출부: 함수명(파라미터 1의 변수명 : 데이터1,  파라미터 2의 변수명 : 데이터2);

=================================================================
4장
플러터 아키텍쳐
플러터는 확장 가능한 계층화된 시스템으로 설계
3계층 구조
Framework (Dart)      앱 개발자가 주로 사용
Engine (C/C++)        렌더링과 코어 기능
Embedder (Platform)  플랫폼별 구현

1) 임베더 (Embedder)
- 각 플랫폼별 네이티브 코드 (Android: Java/C++, iOS: Objective-C)
- 화면 렌더링, 이벤트 처리, 접근성 기능 제공

2) 엔진 (Engine)
- C++로 작성된 핵심 렌더링 엔진
- Skia 그래픽 라이브러리 활용
- 파일/네트워크 I/O, 텍스트 레이아웃 처리

3) 프레임워크 (Framework)
- Dart로 작성된 반응형 UI 프레임워크
- Material/Cupertino 디자인 시스템
- 위젯 시스템과 상태 관리

위젯 시스템
플러터에서 앱을 구성하는 가장 기본적인 단위
버튼, 텍스트와 같이 사용자와 상호작용 하는  요소 뿐만 아닌 패딩이나 마진 등의 눈에 보이지 않는 요소 자체도 모두 위젯이라 한다
플러터는 이런 위젯을 조합하여 앱을 개발하며 이러한 위젯의 조합을 위젯 트리라 한다.

StatelessWidget
불변 위젯
변하지 않는 속성을 가진 위젯 -> 클래스 생성 후 내부 값의 변경이 없다
장점: 성능 최적화, 스레드 안전성, 예측 가능성

StatefulWidget
가변 위젯
런타임 중 상태 변경 가능
사용자 상호작용이나 데이터 변경과 같이 외부 요인에 의해 위젯의 UI 변경 필요 시 사용
용도: 사용자 상호작용, 동적 UI, 애니메이션
장점: 동적 대화형 UI, 재사용성, 유연성

InheritedWidget
위젯 트리 내에서 데이터를 쉽게 공유할 수 있도록 해주는 클래스
상위 위젯에서 하위 위젯으로 데이터 전달 시 모든 자손 클래스를 거치지 않고 해당 데이터가 필요한 클래스에 데이터 전송 (불필요한 위젯까지 리빌딩 되는 문제 방지)
단점: 크고 복잡한 위젯 트리 아래로 데이터의 수동 전송이 번거로움 -> Provider 출시

라이프사이클
위젯이 생성되고 삭제 및 종료되는 과정에서 발생하는 여러 이벤트들의 호출 순서

StatelessWidget 라이프사이클

Constructor → createElement → build
- 단순한 구조
- 상태 변경 시 전체 재생성

StatefulWidget 라이프사이클

Constructor → createState → initState → didChangeDependencies 
    → build → setState → build (반복) → dispose

레이아웃 위젯

주요 레이아웃 위젯

기본 구조 위젯
| 위젯 	 | 용도 		     | 주요 속성 					      |
| Container	 | 박스 모델 	     | padding, margin, decoration 		      |
| Row		 | 가로 배치 	     | mainAxisAlignment, crossAxisAlignment |
| Column	 | 세로 배치		     | mainAxisAlignment, crossAxisAlignment |
| Stack	 | 겹침 배치		     | alignment, fit	 			      |
| Positioned | Stack 내 위치 지정 | left, top, right, bottom 			      |


애니메이션

라우팅(네비게이션)
앱의 화면 간 이동을 도와주는 기능 -> 페이지 전환 기능
플러터에서는 기본제공되는 라우팅 기능 외에도 서드파티 라이브러리를 사용하여 라우팅 처리 가능
라우트 정의
dart
MaterialApp(
  initialRoute: '/',
  routes: {
    '/': (context) => HomePage(),
    '/second': (context) => SecondPage(),
    '/third': (context) => ThirdPage(),
  },
)
| 메서드 			     | 동작 			      | 사용 예시 		 |
| pushNamed 		     | 새 페이지 스택에 추가 | 일반 페이지 이동  |
| pop			      	     | 현재 페이지 제거 	      | 뒤로 가기 		 |
| pushReplacementNamed | 현재 페이지 교체 	      | 로그인 후 홈 이동 |
| popUntil 			     | 특정 경로까지 제거     | 회원가입 완료 후  |

push, pop : 앱 화면이 스택 구조

